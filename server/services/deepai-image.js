const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");
const { v4: uuidv4 } = require("uuid");
require("url-search-params-polyfill");

class DeepAIImageService {
  constructor() {
    this.apiKey = process.env.DEEPAI_API_KEY;
    this.baseURL = "https://api.deepai.org/api";
    console.log("ðŸ”§ Using DeepAI for image generation");
  }

  async generateThumbnail(prompt, userImagePath, format = "horizontal") {
    try {
      // Set dimensions based on format
      const dimensions =
        format === "horizontal"
          ? { width: 1280, height: 720 }
          : { width: 1080, height: 1920 };

      // Create the generation prompt
      const generationPrompt = `Create a professional YouTube thumbnail based on this prompt: "${prompt}"

Requirements:
- Create a ${format} thumbnail (${dimensions.width}x${dimensions.height} pixels)
- Make it eye-catching and professional
- Ensure high contrast and readability
- Add appropriate text overlays if needed
- Use vibrant colors that work well on YouTube
- Optimize for YouTube's platform to increase click-through rates
- Style: Modern, clean, and attention-grabbing`;

      // Generate image using DeepAI (using Stable Diffusion)
      const formData = new URLSearchParams();
      formData.append("text", generationPrompt);
      formData.append("grid_size", "1");
      formData.append("width", dimensions.width.toString());
      formData.append("height", dimensions.height.toString());

      const response = await axios.post(`${this.baseURL}/text2img`, formData, {
        headers: {
          "Api-Key": this.apiKey,
          "Content-Type": "application/x-www-form-urlencoded",
        },
      });

      if (!response.data || !response.data.output_url) {
        throw new Error("No image generated by DeepAI");
      }

      const imageUrl = response.data.output_url;

      // Download the generated image
      const imageResponse = await axios.get(imageUrl, {
        responseType: "arraybuffer",
      });

      const imageBuffer = Buffer.from(imageResponse.data);

      // Save the generated image
      const filename = `${uuidv4()}_${format}.png`;
      const outputPath = path.join(__dirname, "../uploads", filename);

      await fs.writeFile(outputPath, imageBuffer);

      return {
        id: path.parse(filename).name,
        filename: filename,
        format: format,
        dimensions: dimensions,
        url: `/uploads/${filename}`,
        path: outputPath,
        generatedAt: new Date().toISOString(),
        prompt: generationPrompt,
      };
    } catch (error) {
      console.error("DeepAI API Error:", error);
      throw new Error(`Failed to generate thumbnail: ${error.message}`);
    }
  }

  async generateMultipleThumbnails(
    prompts,
    userImagePath,
    formats = ["horizontal", "vertical"]
  ) {
    try {
      const results = [];

      for (const format of formats) {
        for (const prompt of prompts) {
          try {
            const thumbnail = await this.generateThumbnail(
              prompt,
              userImagePath,
              format
            );
            results.push({
              ...thumbnail,
              prompt: prompt,
            });
          } catch (error) {
            console.error(
              `Failed to generate ${format} thumbnail with prompt: ${prompt}`,
              error
            );
            // Continue with other generations
          }
        }
      }

      return results;
    } catch (error) {
      console.error("Multiple thumbnail generation error:", error);
      throw new Error(
        `Failed to generate multiple thumbnails: ${error.message}`
      );
    }
  }

  async editThumbnail(imagePath, editPrompt) {
    try {
      // For editing, we'll generate a new image based on the edit prompt
      const dimensions = { width: 1280, height: 720 }; // Default to horizontal

      const generationPrompt = `Edit this YouTube thumbnail according to: "${editPrompt}"
      
      Create a new professional YouTube thumbnail that incorporates the requested changes.
      Maintain high quality and make it eye-catching for YouTube.`;

      const formData = new URLSearchParams();
      formData.append("text", generationPrompt);
      formData.append("grid_size", "1");
      formData.append("width", dimensions.width.toString());
      formData.append("height", dimensions.height.toString());

      const response = await axios.post(`${this.baseURL}/text2img`, formData, {
        headers: {
          "Api-Key": this.apiKey,
          "Content-Type": "application/x-www-form-urlencoded",
        },
      });

      if (!response.data || !response.data.output_url) {
        throw new Error("No edited image generated by DeepAI");
      }

      const imageUrl = response.data.output_url;

      // Download the edited image
      const imageResponse = await axios.get(imageUrl, {
        responseType: "arraybuffer",
      });

      const imageBuffer = Buffer.from(imageResponse.data);

      // Save the edited image
      const filename = `edited_${uuidv4()}.png`;
      const outputPath = path.join(__dirname, "../uploads", filename);

      await fs.writeFile(outputPath, imageBuffer);

      return {
        id: path.parse(filename).name,
        filename: filename,
        url: `/uploads/${filename}`,
        path: outputPath,
        editedAt: new Date().toISOString(),
        editPrompt: editPrompt,
      };
    } catch (error) {
      console.error("DeepAI edit error:", error);
      throw new Error(`Failed to edit thumbnail: ${error.message}`);
    }
  }

  async analyzeImage(imagePath) {
    try {
      // Read the image file
      const imageBuffer = await fs.readFile(imagePath);
      const base64Image = imageBuffer.toString("base64");

      // Use OpenAI Vision to analyze the image (keeping this as it's good for analysis)
      const OpenAI = require("openai");
      const openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY,
      });

      const response = await openai.chat.completions.create({
        model: "gpt-4-vision-preview",
        messages: [
          {
            role: "user",
            content: [
              {
                type: "text",
                text: `Analyze this YouTube thumbnail image and provide feedback on:
1. Visual appeal and composition
2. Color scheme and contrast
3. Text readability (if any)
4. Overall effectiveness for YouTube
5. Suggestions for improvement

Provide a detailed analysis in a structured format.`,
              },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/png;base64,${base64Image}`,
                },
              },
            ],
          },
        ],
        max_tokens: 500,
      });

      return response.choices[0].message.content;
    } catch (error) {
      console.error("Image analysis error:", error);
      throw new Error(`Failed to analyze image: ${error.message}`);
    }
  }
}

// DeepAI service deprecated. No longer exported.
